import type React from "react"
import type { Metadata } from "next"
import { Inter, Plus_Jakarta_Sans } from "next/font/google"
import "./globals.css"

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
})

const plusJakarta = Plus_Jakarta_Sans({
  subsets: ["latin"],
  variable: "--font-jakarta",
})

export const metadata: Metadata = {
  title: "HealthTrack - Personal & Community Health Companion",
  description:
    "Track your health vitals, connect with community health resources, and stay on top of your wellness goals with HealthTrack.",
  authors: [{ name: "HealthTrack Team" }],
  openGraph: {
    title: "healthtrack-community-wellbeing",
    description: "Lovable Generated Project",
    type: "website",
    images: ["https://lovable.dev/opengraph-image-p98pqg.png"],
  },
  twitter: {
    card: "summary_large_image",
    site: "@lovable_dev",
    images: ["https://lovable.dev/opengraph-image-p98pqg.png"],
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={`${inter.variable} ${plusJakarta.variable}`}>
      <body className="font-inter antialiased">{children}</body>
    </html>
  )
}



import { HealthTrackApp } from "@/components/HealthTrackApp"

export default function Home() {
  return <HealthTrackApp />
}


@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --primary-soft: 221.2 83.2% 95%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --secondary-soft: 210 40% 98%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --accent-soft: 210 40% 98%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --warning: 38 92% 50%;
    --warning-foreground: 48 96% 89%;
    --success: 142 76% 36%;
    --success-foreground: 355 100% 97%;
    --radius: 0.75rem;

    /* Sidebar colors */
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;

    /* Custom gradients */
    --gradient-primary: linear-gradient(135deg, hsl(221.2 83.2% 53.3%) 0%, hsl(221.2 83.2% 45%) 100%);
    --gradient-secondary: linear-gradient(135deg, hsl(142 76% 36%) 0%, hsl(142 76% 28%) 100%);
    --gradient-accent: linear-gradient(135deg, hsl(262.1 83.3% 57.8%) 0%, hsl(262.1 83.3% 49%) 100%);
    --gradient-warm: linear-gradient(135deg, hsl(38 92% 50%) 0%, hsl(38 92% 42%) 100%);

    /* Custom shadows */
    --shadow-health: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-card: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    --shadow-elevated: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);

    /* Custom transitions */
    --transition-smooth: cubic-bezier(0.4, 0, 0.2, 1);
    --transition-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --primary-soft: 217.2 91.2% 15%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --secondary-soft: 217.2 32.6% 12%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --accent-soft: 217.2 32.6% 12%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
    --warning: 38 92% 50%;
    --warning-foreground: 48 96% 89%;
    --success: 142 76% 36%;
    --success-foreground: 355 100% 97%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



"use client"

import { useState, useEffect } from "react"
import { NavigationBar } from "@/components/NavigationBar"
import { OnboardingScreen } from "@/components/OnboardingScreen"
import { NotificationToast } from "@/components/EnhancedComponents"
import { HomeScreen } from "@/components/screens/HomeScreen"
import { TrackingScreen } from "@/components/screens/TrackingScreen"
import { CommunityScreen } from "@/components/screens/CommunityScreen"
import { MapScreen } from "@/components/screens/MapScreen"
import { AlertsScreen } from "@/components/screens/AlertsScreen"

export const HealthTrackApp = () => {
  const [activeTab, setActiveTab] = useState("home")
  const [showOnboarding, setShowOnboarding] = useState(true)
  const [notification, setNotification] = useState<{
    title: string
    message: string
    type: "success" | "error" | "warning" | "info"
    action?: { label: string; onClick: () => void }
  } | null>(null)

  // Simulate welcome notification after onboarding
  useEffect(() => {
    if (!showOnboarding) {
      const timer = setTimeout(() => {
        setNotification({
          title: "Welcome to HealthTrack!",
          message: "Your health journey starts now. Let's log your first metrics.",
          type: "success",
          action: {
            label: "Start Tracking",
            onClick: () => {
              setActiveTab("track")
              setNotification(null)
            },
          },
        })
      }, 1000)
      return () => clearTimeout(timer)
    }
  }, [showOnboarding])

  const handleCompleteOnboarding = () => {
    setShowOnboarding(false)
  }

  const renderScreen = () => {
    switch (activeTab) {
      case "home":
        return <HomeScreen />
      case "track":
        return <TrackingScreen />
      case "community":
        return <CommunityScreen />
      case "map":
        return <MapScreen />
      case "alerts":
        return <AlertsScreen />
      default:
        return <HomeScreen />
    }
  }

  if (showOnboarding) {
    return <OnboardingScreen onComplete={handleCompleteOnboarding} />
  }

  return (
    <div className="min-h-screen bg-background font-inter">
      {/* Mobile App Container */}
      <div className="max-w-md mx-auto bg-card min-h-screen relative shadow-elevated">
        {/* Main Content */}
        <div className="overflow-y-auto animate-fade-in">{renderScreen()}</div>

        {/* Bottom Navigation */}
        <NavigationBar activeTab={activeTab} onTabChange={setActiveTab} />

        {/* Notification Toast */}
        {notification && <NotificationToast {...notification} onClose={() => setNotification(null)} />}
      </div>
    </div>
  )
}




"use client"

import { useState } from "react"
import { Heart, Droplets, Moon, Zap, Calendar, TrendingUp, User, Plus, Target } from "lucide-react"
import { EnhancedHealthCard } from "@/components/EnhancedComponents"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"

export const HomeScreen = () => {
  const [userName] = useState("Alex")
  const currentTime = new Date().getHours()
  const greeting = currentTime < 12 ? "Good Morning" : currentTime < 17 ? "Good Afternoon" : "Good Evening"

  return (
    <div className="space-y-6 pb-20 animate-fade-in">
      {/* Header */}
      <div className="bg-gradient-primary text-primary-foreground p-6 rounded-b-2xl">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold font-jakarta">
              {greeting}, {userName}!
            </h1>
            <p className="text-primary-foreground/80 mt-1">How are you feeling today?</p>
          </div>
          <div className="bg-white/20 rounded-full p-3 hover:bg-white/30 transition-colors cursor-pointer">
            <User className="h-8 w-8" />
          </div>
        </div>

        {/* Today's Goals */}
        <div className="mt-6 bg-white/10 rounded-xl p-4 backdrop-blur-sm">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-semibold">Today's Health Goals</h3>
            <Target className="h-4 w-4 opacity-80" />
          </div>
          <div className="space-y-3">
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm">Water Intake</span>
                <span className="text-sm font-medium">6/8 glasses</span>
              </div>
              <Progress value={75} className="h-2" />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm">Steps</span>
                <span className="text-sm font-medium">7,245/10,000</span>
              </div>
              <Progress value={72} className="h-2" />
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="px-6">
        <div className="flex items-center space-x-3">
          <Button className="flex-1 bg-gradient-secondary text-secondary-foreground shadow-health">
            <Plus className="h-4 w-4 mr-2" />
            Quick Log
          </Button>
          <Button variant="outline" className="flex-1 bg-transparent">
            <Calendar className="h-4 w-4 mr-2" />
            Schedule
          </Button>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="px-6">
        <h2 className="text-lg font-semibold mb-4 font-jakarta">Health Overview</h2>
        <div className="grid grid-cols-2 gap-4">
          <EnhancedHealthCard
            title="Heart Rate"
            value="72"
            unit="bpm"
            icon={Heart}
            trend="neutral"
            trendValue="Normal"
            variant="primary"
            isAnimated={true}
          />
          <EnhancedHealthCard
            title="Hydration"
            value="75"
            unit="%"
            icon={Droplets}
            trend="up"
            trendValue="+5% today"
            variant="secondary"
          />
          <EnhancedHealthCard
            title="Sleep"
            value="7.5"
            unit="hrs"
            icon={Moon}
            trend="up"
            trendValue="+30min"
            variant="accent"
          />
          <EnhancedHealthCard
            title="Energy"
            value="85"
            unit="%"
            icon={Zap}
            trend="up"
            trendValue="High"
            variant="warning"
          />
        </div>
      </div>

      {/* Upcoming Reminders */}
      <div className="px-6">
        <h2 className="text-lg font-semibold mb-4">Upcoming</h2>
        <Card className="shadow-card">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <div className="bg-accent-soft rounded-full p-2">
                <Calendar className="h-4 w-4 text-accent" />
              </div>
              <div className="flex-1">
                <p className="font-medium">Blood Pressure Check</p>
                <p className="text-sm text-muted-foreground">Today at 2:00 PM</p>
              </div>
              <Button size="sm" variant="outline">
                Mark Done
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Health Insights */}
      <div className="px-6">
        <h2 className="text-lg font-semibold mb-4">Health Insights</h2>
        <Card className="shadow-card bg-gradient-to-r from-secondary-soft to-accent-soft">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <div className="bg-success rounded-full p-2">
                <TrendingUp className="h-4 w-4 text-success-foreground" />
              </div>
              <div>
                <h3 className="font-semibold text-success">Great Progress!</h3>
                <p className="text-sm text-muted-foreground mt-1">
                  Your sleep quality has improved by 20% this week. Keep maintaining your bedtime routine!
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
} 



"use client"

import type React from "react"

import { useState } from "react"
import { X, Check, AlertCircle, Info } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

interface NotificationToastProps {
  title: string
  message: string
  type: "success" | "error" | "warning" | "info"
  onClose: () => void
  action?: {
    label: string
    onClick: () => void
  }
}

export const NotificationToast = ({ title, message, type, onClose, action }: NotificationToastProps) => {
  const typeStyles = {
    success: {
      icon: Check,
      bgColor: "bg-success/10 border-success/20",
      iconColor: "text-success",
      titleColor: "text-success",
    },
    error: {
      icon: AlertCircle,
      bgColor: "bg-destructive/10 border-destructive/20",
      iconColor: "text-destructive",
      titleColor: "text-destructive",
    },
    warning: {
      icon: AlertCircle,
      bgColor: "bg-warning/10 border-warning/20",
      iconColor: "text-warning",
      titleColor: "text-warning",
    },
    info: {
      icon: Info,
      bgColor: "bg-primary/10 border-primary/20",
      iconColor: "text-primary",
      titleColor: "text-primary",
    },
  }

  const config = typeStyles[type]
  const Icon = config.icon

  return (
    <Card className={cn("fixed top-4 right-4 z-50 w-80 animate-slide-in shadow-elevated border-2", config.bgColor)}>
      <CardContent className="p-4">
        <div className="flex items-start space-x-3">
          <Icon className={cn("h-5 w-5 mt-0.5", config.iconColor)} />
          <div className="flex-1 space-y-1">
            <h4 className={cn("font-semibold", config.titleColor)}>{title}</h4>
            <p className="text-sm text-muted-foreground">{message}</p>
            {action && (
              <Button size="sm" variant="outline" onClick={action.onClick} className="mt-2 bg-transparent">
                {action.label}
              </Button>
            )}
          </div>
          <Button variant="ghost" size="sm" onClick={onClose} className="h-6 w-6 p-0">
            <X className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

interface HealthMetricCardProps {
  title: string
  value: string
  unit?: string
  icon: React.ElementType
  trend?: "up" | "down" | "neutral"
  trendValue?: string
  variant?: "primary" | "secondary" | "accent" | "warning"
  isAnimated?: boolean
  onClick?: () => void
}

export const EnhancedHealthCard = ({
  title,
  value,
  unit,
  icon: Icon,
  trend,
  trendValue,
  variant = "primary",
  isAnimated = false,
  onClick,
}: HealthMetricCardProps) => {
  const [isHovered, setIsHovered] = useState(false)

  const variantStyles = {
    primary: "bg-gradient-primary text-primary-foreground",
    secondary: "bg-gradient-secondary text-secondary-foreground",
    accent: "bg-gradient-accent text-accent-foreground",
    warning: "bg-gradient-warm text-warning-foreground",
  }

  const getTrendColor = () => {
    if (trend === "up") return "text-success"
    if (trend === "down") return "text-destructive"
    return "text-muted-foreground"
  }

  return (
    <Card
      className={cn(
        "relative overflow-hidden shadow-card hover:shadow-elevated transition-all duration-300 cursor-pointer",
        isHovered && "scale-105",
        isAnimated && "animate-pulse-health",
      )}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={onClick}
    >
      <CardContent className="p-4">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-medium text-muted-foreground">{title}</h3>
          <div className={cn("rounded-full p-2 transition-all duration-300", variantStyles[variant])}>
            <Icon className={cn("h-4 w-4", isAnimated && "animate-pulse")} />
          </div>
        </div>
        <div className="space-y-2">
          <div className="flex items-baseline space-x-1">
            <span className="text-2xl font-bold">{value}</span>
            {unit && <span className="text-sm text-muted-foreground">{unit}</span>}
          </div>
          {trend && trendValue && (
            <div className={cn("text-xs flex items-center space-x-1", getTrendColor())}>
              <span>{trend === "up" ? "↗" : trend === "down" ? "↘" : "→"}</span>
              <span>{trendValue}</span>
            </div>
          )}
        </div>
        {isHovered && (
          <div className="absolute inset-0 bg-gradient-to-r from-white/5 to-white/10 pointer-events-none" />
        )}
      </CardContent>
    </Card>
  )
}



import { Loader2 } from "lucide-react"
import { cn } from "@/lib/utils"

interface LoadingSpinnerProps {
  size?: "sm" | "md" | "lg"
  className?: string
}

export const LoadingSpinner = ({ size = "md", className }: LoadingSpinnerProps) => {
  const sizes = {
    sm: "h-4 w-4",
    md: "h-6 w-6",
    lg: "h-8 w-8",
  }

  return (
    <div className={cn("flex items-center justify-center", className)}>
      <Loader2 className={cn("animate-spin text-primary", sizes[size])} />
    </div>
  )
}

interface LoadingCardProps {
  className?: string
}

export const LoadingCard = ({ className }: LoadingCardProps) => {
  return (
    <div className={cn("bg-card rounded-lg p-4 shadow-card animate-pulse", className)}>
      <div className="space-y-3">
        <div className="h-4 bg-muted rounded w-3/4"></div>
        <div className="h-6 bg-muted rounded w-1/2"></div>
        <div className="h-3 bg-muted rounded w-full"></div>
      </div>
    </div>
  )
}



import { Loader2 } from "lucide-react"
import { cn } from "@/lib/utils"

interface LoadingSpinnerProps {
  size?: "sm" | "md" | "lg"
  className?: string
}

export const LoadingSpinner = ({ size = "md", className }: LoadingSpinnerProps) => {
  const sizes = {
    sm: "h-4 w-4",
    md: "h-6 w-6",
    lg: "h-8 w-8",
  }

  return (
    <div className={cn("flex items-center justify-center", className)}>
      <Loader2 className={cn("animate-spin text-primary", sizes[size])} />
    </div>
  )
}

interface LoadingCardProps {
  className?: string
}

export const LoadingCard = ({ className }: LoadingCardProps) => {
  return (
    <div className={cn("bg-card rounded-lg p-4 shadow-card animate-pulse", className)}>
      <div className="space-y-3">
        <div className="h-4 bg-muted rounded w-3/4"></div>
        <div className="h-6 bg-muted rounded w-1/2"></div>
        <div className="h-3 bg-muted rounded w-full"></div>
      </div>
    </div>
  )
}



"use client"

import { cn } from "@/lib/utils"

import { useState } from "react"
import { ChevronRight, Heart, Users, Shield } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"

interface OnboardingScreenProps {
  onComplete: () => void
}

export const OnboardingScreen = ({ onComplete }: OnboardingScreenProps) => {
  const [currentStep, setCurrentStep] = useState(0)

  const steps = [
    {
      title: "Welcome to HealthTrack",
      description: "Your personal health companion for tracking vitals and connecting with your community.",
      icon: Heart,
      color: "text-primary",
    },
    {
      title: "Track Your Health",
      description: "Monitor your vital signs, medications, and wellness goals all in one place.",
      icon: Heart,
      color: "text-secondary",
    },
    {
      title: "Connect with Community",
      description: "Find local health resources, support groups, and wellness events near you.",
      icon: Users,
      color: "text-accent",
    },
    {
      title: "Stay Informed",
      description: "Get personalized health alerts and reminders to keep you on track.",
      icon: Shield,
      color: "text-warning",
    },
  ]

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    } else {
      onComplete()
    }
  }

  const currentStepData = steps[currentStep]
  const Icon = currentStepData.icon

  return (
    <div className="min-h-screen bg-gradient-primary flex items-center justify-center p-6">
      <div className="w-full max-w-md">
        <Card className="shadow-elevated">
          <CardContent className="p-8 text-center">
            <div
              className={cn(
                "mx-auto w-16 h-16 rounded-full flex items-center justify-center mb-6",
                "bg-gradient-to-r from-primary/20 to-secondary/20",
              )}
            >
              <Icon className={cn("h-8 w-8", currentStepData.color)} />
            </div>

            <h1 className="text-2xl font-bold font-jakarta mb-4">{currentStepData.title}</h1>

            <p className="text-muted-foreground mb-8 leading-relaxed">{currentStepData.description}</p>

            <div className="flex justify-center space-x-2 mb-8">
              {steps.map((_, index) => (
                <div
                  key={index}
                  className={cn(
                    "w-2 h-2 rounded-full transition-all duration-300",
                    index === currentStep ? "bg-primary w-8" : "bg-muted",
                  )}
                />
              ))}
            </div>

            <Button onClick={handleNext} className="w-full" size="lg">
              {currentStep < steps.length - 1 ? (
                <>
                  Next
                  <ChevronRight className="ml-2 h-4 w-4" />
                </>
              ) : (
                "Get Started"
              )}
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

"use client"

import { useState } from "react"
import { Heart, Droplets, Moon, Activity } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export const TrackingScreen = () => {
  const [selectedMetric, setSelectedMetric] = useState<string | null>(null)

  const metrics = [
    { id: "heart-rate", name: "Heart Rate", icon: Heart, unit: "bpm", color: "text-red-500" },
    { id: "hydration", name: "Water Intake", icon: Droplets, unit: "glasses", color: "text-blue-500" },
    { id: "sleep", name: "Sleep", icon: Moon, unit: "hours", color: "text-purple-500" },
    { id: "exercise", name: "Exercise", icon: Activity, unit: "minutes", color: "text-green-500" },
  ]

  return (
    <div className="space-y-6 p-6 pb-20">
      <div className="text-center">
        <h1 className="text-2xl font-bold font-jakarta mb-2">Track Your Health</h1>
        <p className="text-muted-foreground">Log your daily health metrics</p>
      </div>

      {/* Quick Add Buttons */}
      <div className="grid grid-cols-2 gap-4">
        {metrics.map((metric) => {
          const Icon = metric.icon
          return (
            <Card
              key={metric.id}
              className="cursor-pointer hover:shadow-md transition-shadow"
              onClick={() => setSelectedMetric(metric.id)}
            >
              <CardContent className="p-4 text-center">
                <Icon className={`h-8 w-8 mx-auto mb-2 ${metric.color}`} />
                <h3 className="font-medium">{metric.name}</h3>
                <p className="text-sm text-muted-foreground">{metric.unit}</p>
              </CardContent>
            </Card>
          )
        })}
      </div>

      {/* Quick Entry Form */}
      {selectedMetric && (
        <Card className="shadow-card">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <span>Log {metrics.find((m) => m.id === selectedMetric)?.name}</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="value">Value</Label>
              <Input
                id="value"
                type="number"
                placeholder={`Enter ${metrics.find((m) => m.id === selectedMetric)?.unit}`}
              />
            </div>
            <div>
              <Label htmlFor="notes">Notes (optional)</Label>
              <Input id="notes" placeholder="Add any notes..." />
            </div>
            <div className="flex space-x-2">
              <Button className="flex-1">Save Entry</Button>
              <Button variant="outline" onClick={() => setSelectedMetric(null)}>
                Cancel
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Recent Entries */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Recent Entries</h2>
        <div className="space-y-3">
          {[
            { metric: "Heart Rate", value: "72 bpm", time: "2 hours ago", icon: Heart },
            { metric: "Water Intake", value: "6 glasses", time: "4 hours ago", icon: Droplets },
            { metric: "Sleep", value: "7.5 hours", time: "Yesterday", icon: Moon },
          ].map((entry, index) => {
            const Icon = entry.icon
            return (
              <Card key={index} className="shadow-card">
                <CardContent className="p-4">
                  <div className="flex items-center space-x-3">
                    <Icon className="h-5 w-5 text-primary" />
                    <div className="flex-1">
                      <p className="font-medium">{entry.metric}</p>
                      <p className="text-sm text-muted-foreground">{entry.time}</p>
                    </div>
                    <span className="font-semibold">{entry.value}</span>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      </div>
    </div>
  )
}


import { Users, MapPin, Calendar, MessageCircle } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

export const CommunityScreen = () => {
  const events = [
    {
      title: "Morning Yoga Class",
      location: "Central Park",
      time: "8:00 AM - 9:00 AM",
      participants: 12,
      category: "Fitness",
    },
    {
      title: "Diabetes Support Group",
      location: "Community Center",
      time: "2:00 PM - 3:30 PM",
      participants: 8,
      category: "Support",
    },
    {
      title: "Healthy Cooking Workshop",
      location: "Local Kitchen",
      time: "6:00 PM - 8:00 PM",
      participants: 15,
      category: "Nutrition",
    },
  ]

  const discussions = [
    {
      title: "Tips for better sleep hygiene",
      author: "Sarah M.",
      replies: 23,
      time: "2 hours ago",
    },
    {
      title: "Managing stress during work",
      author: "Mike R.",
      replies: 15,
      time: "4 hours ago",
    },
    {
      title: "Healthy meal prep ideas",
      author: "Lisa K.",
      replies: 31,
      time: "6 hours ago",
    },
  ]

  return (
    <div className="space-y-6 p-6 pb-20">
      <div className="text-center">
        <h1 className="text-2xl font-bold font-jakarta mb-2">Community</h1>
        <p className="text-muted-foreground">Connect with others on their health journey</p>
      </div>

      {/* Community Stats */}
      <div className="grid grid-cols-3 gap-4">
        <Card className="text-center">
          <CardContent className="p-4">
            <Users className="h-6 w-6 mx-auto mb-2 text-primary" />
            <p className="text-2xl font-bold">1,247</p>
            <p className="text-sm text-muted-foreground">Members</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="p-4">
            <Calendar className="h-6 w-6 mx-auto mb-2 text-secondary" />
            <p className="text-2xl font-bold">23</p>
            <p className="text-sm text-muted-foreground">Events</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="p-4">
            <MessageCircle className="h-6 w-6 mx-auto mb-2 text-accent" />
            <p className="text-2xl font-bold">156</p>
            <p className="text-sm text-muted-foreground">Discussions</p>
          </CardContent>
        </Card>
      </div>

      {/* Upcoming Events */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Upcoming Events</h2>
        <div className="space-y-3">
          {events.map((event, index) => (
            <Card key={index} className="shadow-card">
              <CardContent className="p-4">
                <div className="flex items-start justify-between mb-2">
                  <h3 className="font-semibold">{event.title}</h3>
                  <Badge variant="secondary">{event.category}</Badge>
                </div>
                <div className="space-y-1 text-sm text-muted-foreground mb-3">
                  <div className="flex items-center space-x-1">
                    <MapPin className="h-4 w-4" />
                    <span>{event.location}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Calendar className="h-4 w-4" />
                    <span>{event.time}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Users className="h-4 w-4" />
                    <span>{event.participants} participants</span>
                  </div>
                </div>
                <Button size="sm" className="w-full">
                  Join Event
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Recent Discussions */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Recent Discussions</h2>
        <div className="space-y-3">
          {discussions.map((discussion, index) => (
            <Card key={index} className="shadow-card cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <h3 className="font-semibold mb-2">{discussion.title}</h3>
                <div className="flex items-center justify-between text-sm text-muted-foreground">
                  <span>by {discussion.author}</span>
                  <div className="flex items-center space-x-4">
                    <span className="flex items-center space-x-1">
                      <MessageCircle className="h-4 w-4" />
                      <span>{discussion.replies}</span>
                    </span>
                    <span>{discussion.time}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )
}



import { Bell, AlertTriangle, Info, CheckCircle, Clock, X } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { cn } from "@/lib/utils"

export const AlertsScreen = () => {
  const alerts = [
    {
      id: 1,
      type: "medication",
      priority: "high",
      title: "Medication Reminder",
      message: "Time to take your blood pressure medication",
      time: "5 minutes ago",
      actionRequired: true,
    },
    {
      id: 2,
      type: "appointment",
      priority: "medium",
      title: "Upcoming Appointment",
      message: "Doctor visit scheduled for tomorrow at 2:00 PM",
      time: "2 hours ago",
      actionRequired: false,
    },
    {
      id: 3,
      type: "health",
      priority: "low",
      title: "Health Tip",
      message: "Remember to stay hydrated! You're 2 glasses behind your daily goal.",
      time: "4 hours ago",
      actionRequired: false,
    },
    {
      id: 4,
      type: "emergency",
      priority: "high",
      title: "Emergency Alert",
      message: "Severe weather warning in your area. Stay indoors if possible.",
      time: "6 hours ago",
      actionRequired: true,
    },
  ]

  const getAlertIcon = (type: string) => {
    switch (type) {
      case "medication":
        return Clock
      case "appointment":
        return Bell
      case "health":
        return Info
      case "emergency":
        return AlertTriangle
      default:
        return Bell
    }
  }

  const getAlertColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "text-destructive"
      case "medium":
        return "text-warning"
      case "low":
        return "text-primary"
      default:
        return "text-muted-foreground"
    }
  }

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case "high":
        return <Badge variant="destructive">High</Badge>
      case "medium":
        return <Badge className="bg-warning text-warning-foreground">Medium</Badge>
      case "low":
        return <Badge variant="secondary">Low</Badge>
      default:
        return <Badge variant="outline">Normal</Badge>
    }
  }

  return (
    <div className="space-y-6 p-6 pb-20">
      <div className="text-center">
        <h1 className="text-2xl font-bold font-jakarta mb-2">Alerts & Notifications</h1>
        <p className="text-muted-foreground">Stay on top of your health reminders</p>
      </div>

      {/* Alert Summary */}
      <div className="grid grid-cols-3 gap-4">
        <Card className="text-center">
          <CardContent className="p-4">
            <AlertTriangle className="h-6 w-6 mx-auto mb-2 text-destructive" />
            <p className="text-2xl font-bold">2</p>
            <p className="text-sm text-muted-foreground">High Priority</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="p-4">
            <Clock className="h-6 w-6 mx-auto mb-2 text-warning" />
            <p className="text-2xl font-bold">1</p>
            <p className="text-sm text-muted-foreground">Pending</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="p-4">
            <CheckCircle className="h-6 w-6 mx-auto mb-2 text-success" />
            <p className="text-2xl font-bold">8</p>
            <p className="text-sm text-muted-foreground">Completed</p>
          </CardContent>
        </Card>
      </div>

      {/* Alerts List */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Recent Alerts</h2>
        <div className="space-y-3">
          {alerts.map((alert) => {
            const Icon = getAlertIcon(alert.type)
            return (
              <Card key={alert.id} className="shadow-card">
                <CardContent className="p-4">
                  <div className="flex items-start space-x-3">
                    <div className={cn("rounded-full p-2 bg-muted", getAlertColor(alert.priority))}>
                      <Icon className="h-4 w-4" />
                    </div>
                    <div className="flex-1 space-y-2">
                      <div className="flex items-center justify-between">
                        <h3 className="font-semibold">{alert.title}</h3>
                        <div className="flex items-center space-x-2">
                          {getPriorityBadge(alert.priority)}
                          <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground">{alert.message}</p>
                      <div className="flex items-center justify-between">
                        <span className="text-xs text-muted-foreground">{alert.time}</span>
                        {alert.actionRequired && (
                          <div className="flex space-x-2">
                            <Button size="sm">Take Action</Button>
                            <Button size="sm" variant="outline">
                              Dismiss
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      </div>

      {/* Quick Actions */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-2 gap-4">
          <Button variant="outline" className="h-16 flex-col space-y-1 bg-transparent">
            <Bell className="h-5 w-5" />
            <span className="text-sm">Mark All Read</span>
          </Button>
          <Button variant="outline" className="h-16 flex-col space-y-1 bg-transparent">
            <CheckCircle className="h-5 w-5" />
            <span className="text-sm">Clear Completed</span>
          </Button>
        </div>
      </div>
    </div>
  )
}


import type { Config } from "tailwindcss"

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          soft: "hsl(var(--primary-soft))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
          soft: "hsl(var(--secondary-soft))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
          soft: "hsl(var(--accent-soft))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        warning: {
          DEFAULT: "hsl(var(--warning))",
          foreground: "hsl(var(--warning-foreground))",
        },
        success: {
          DEFAULT: "hsl(var(--success))",
          foreground: "hsl(var(--success-foreground))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      fontFamily: {
        inter: ["var(--font-inter)", "sans-serif"],
        jakarta: ["var(--font-jakarta)", "sans-serif"],
        sans: ["var(--font-inter)", "sans-serif"],
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      backgroundImage: {
        "gradient-primary": "var(--gradient-primary)",
        "gradient-secondary": "var(--gradient-secondary)",
        "gradient-accent": "var(--gradient-accent)",
        "gradient-warm": "var(--gradient-warm)",
      },
      boxShadow: {
        health: "var(--shadow-health)",
        card: "var(--shadow-card)",
        elevated: "var(--shadow-elevated)",
      },
      transitionTimingFunction: {
        smooth: "var(--transition-smooth)",
        bounce: "var(--transition-bounce)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "pulse-health": {
          "0%, 100%": {
            opacity: "1",
          },
          "50%": {
            opacity: "0.7",
          },
        },
        "slide-in": {
          "0%": {
            transform: "translateY(10px)",
            opacity: "0",
          },
          "100%": {
            transform: "translateY(0)",
            opacity: "1",
          },
        },
        "fade-in": {
          "0%": {
            opacity: "0",
          },
          "100%": {
            opacity: "1",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "pulse-health": "pulse-health 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
        "slide-in": "slide-in 0.3s ease-out",
        "fade-in": "fade-in 0.3s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config



{
  "name": "healthtrack-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.1.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@radix-ui/react-accordion": "^1.1.2",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-hover-card": "^1.0.7",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-menubar": "^1.0.4",
    "@radix-ui/react-navigation-menu": "^1.1.4",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-radio-group": "^1.1.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-toggle": "^1.0.3",
    "@radix-ui/react-toggle-group": "^1.0.4",
    "@radix-ui/react-tooltip": "^1.0.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.263.1",
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies":

```json\
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20.5.2",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "autoprefixer": "^10.4.15",
    "eslint": "^8.47.0",
    "eslint-config-next": "15.1.3",
    "postcss": "^8.4.28",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.1.6"
  }
}

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


# HealthTrack - Personal & Community Health Companion

A modern health tracking application built with Next.js, React, and Tailwind CSS.

## Features

- **Personal Health Tracking**: Monitor vital signs, medications, and wellness goals
- **Community Connection**: Find local health resources and connect with support groups
- **Health Map**: Locate nearby hospitals, clinics, and pharmacies
- **Smart Alerts**: Get personalized health reminders and notifications
- **Responsive Design**: Optimized for mobile and desktop use

## Getting Started

### Prerequisites

- Node.js 18+ 
- npm or yarn

### Installation

1. Clone the repository
\`\`\`bash
git clone https://github.com/yourusername/healthtrack-app.git
cd healthtrack-app
\`\`\`

2. Install dependencies
\`\`\`bash
npm install
# or
yarn install
\`\`\`

3. Run the development server
\`\`\`bash
npm run dev
# or
yarn dev
\`\`\`

4. Open [http://localhost:3000](http://localhost:3000) in your browser

## Project Structure

\`\`\`
healthtrack-app/
├── app/                    # Next.js App Router
│   ├── layout.tsx         # Root layout
│   ├── page.tsx           # Home page
│   └── globals.css        # Global styles
├── components/            # React components
│   ├── screens/          # Screen components
│   ├── ui/               # shadcn/ui components
│   └── *.tsx             # Other components
├── lib/                  # Utility functions
└── public/               # Static assets
\`\`\`

## Technologies Used

- **Next.js 15** - React framework with App Router
- **React 18** - UI library
- **TypeScript** - Type safety
- **Tailwind CSS** - Styling
- **shadcn/ui** - UI component library
- **Lucide React** - Icons
- **Radix UI** - Headless UI primitives

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

For support, email support@healthtrack.com or join our community discussions.
